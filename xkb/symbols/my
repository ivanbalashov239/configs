default partial alphanumeric_keys
xkb_symbols "dvp" {
//include "us(dvorak)"

name[Group1] = "English (programmer Dvorak)";

//Unmodified Shift AltGr Shift+AltGr
// symbols row, left side
key <TLDE> { [ dollar,asciitilde,dead_tilde] };
key <AE01> { [ bracketleft,1 ,F1] };
key <AE02> { [ bracketright,2, F2], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
key <AE03> { [ braceleft,3,F3], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
key <AE04> { [ braceright,4,F4], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
key <AE05> { [ equal,5,F5], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
key <AE06> { [ ampersand,6,F6], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };

// symbols row, right side
key <AE07> { [ asterisk,7, F7], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
key <AE08> { [ plus,8,F8], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
key <AE09> { [ parenleft,9,F9], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
key <AE10> { [ parenright,0,F10], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
key <AE11> { [ exclam,percent,F11], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };// reversed interrobang
key <AE12> { [ numbersign,grave,F12] };


// upper row, left side
key <AD01> { [ colon,semicolon,7] };
key <AD02> { [ comma,less,8] };
key <AD03> { [ period,greater,9] };
key <AD04> { [ p, P,0,section] };
key <AD05> { [ y, Y,udiaeresis,Udiaeresis ] };

// upper row, right side
key <AD06> { [f,	F		]	};
key <AD07> { [g,	G, Home]	};
key <AD08> { [ c, C, End] };
key <AD09> { [ r, R, Insert] };
key <AD10> { [ l, L, Delete]};
key <AD11> { [ slash,question,questiondown,U203D] };// interrobang
key <AD12> { [ at,asciicircum,flex, dead_caron ] };

// home row, left side
key <AC01> { [ a, A,4] };
key <AC02> { [ o, O,5] };
key <AC03> { [ e, E,6] };
key <AC04> { [ u, U, Escape, Escape] };
key <AC05> { [i,	I		]	};

// home row, right side
key <AC06> { [ d, D,eth,ETH] };
key <AC07> { [ h, H,Left] };
key <AC08> { [ t, T,Down] };
key <AC09> { [ n, N,Up] };
key <AC10> { [ s, S,Right] };
key <AC11> { [ minus,underscore,hyphen,endash], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
key <BKSL> { [ backslash,bar] };
//key <AC10> { [ s, S,KP_Right] };
//
// lower row, left side
key <AB01> { [ apostrophe,quotedbl,1] };
key <AB02> { [q,	Q,	2	]	};
key <AB03> { [j,	J,	3	]	};
key <AB04> { [k,	K,	Escape, Escape	]	};
key <AB05> { [x,	X		]	};
key <AB06> { [b,	B		]	};
key <AB07> { [m,	M		]	};
key <AB08> { [w,	W		]	};
key <AB09> { [v,	V		]	};
key <AB10> { [z,	Z		]	};
key <CAPS> { [ BackSpace, Delete, BackSpace ,BackSpace] };
key <SPCE> { [ space, space, ISO_Last_Group, space] };



		key <TAB>  { [ Control_L, Control_L, Tab, Tab ]};
		key <RTRN> { [ Return, Return, ISO_Last_Group, Return ]};
		key <PRSC> { [ Multi_key, Multi_key, Multi_key, Multi_key]};
		key <LCTL> { [ Tab ] };

include "level3(ralt_switch)"
};

// phonetic layout for Russian letters on an US keyboard
// by Ivan Popov <pin@konvalo.org> 2005-07-17

// level3 modifier is a shortcut to the "us" meaning of the keys where
// we place cyrillic letters, handy for accessing the corresponding
// punctuation marks.
// It is important to have access to punctuation marks, and the rest of
// alphabetical keys are added for being consequent so that the users
// can expect the level3 modifier to give what the key label shows.


partial alphanumeric_keys
xkb_symbols "rus" {

name[Group1]= "Russian (Dvorak, phonetic)";

include "my(dvp)"

key.type[group1]="FOUR_LEVEL_ALPHABETIC";

//
//key <AE03> { [ braceleft,3,cent], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };
//key <AE04> { [ braceright,4,yen], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };


//key <AE01> {	[1,	bracketleft 		]	};
//key <AE02> {	[2,	bracketright		]	};
//key <AE03> {	[3,	braceleft			]	};
//key <AE04> {	[4,	braceright		]	};
//key <AE05> {	[5,	equal			]	};
//key <AE06> {	[6,	asciicircum		]	};
//key <AE07> {	[7,	asterisk		]	};
//key <AE08> {	[8,	plus			]	};
//key <AE09> {	[9,	parenleft		]	};
//key <AE10> {	[0,	parenright		]	};
//key <AE11> { [ exclam,percent,exclamdown,U2E18], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };// reversed interrobang
//key <AE12> { [ numbersign,grave,dead_grave] };


// upper row, left side
//key <AD01> { [ apostrophe,quotedbl,7] };
key <AD02> { [ comma,less,8] };
key <AD03> { [ period,greater,9] };
key <AD04> { [ Cyrillic_pe, Cyrillic_PE,0] };
key <AD05> { [ Cyrillic_yeru, Cyrillic_YERU,udiaeresis,Udiaeresis ] };

// upper row, right side
key <AD06> { [Cyrillic_ef, Cyrillic_EF,colon,semicolon	]	};
key <AD07> { [Cyrillic_ghe, Cyrillic_GHE		]	};
key <AD08> { [ Cyrillic_tse, Cyrillic_TSE] };
key <AD09> { [ Cyrillic_er, Cyrillic_ER,registered,trademark] };
key <AD10> { [Cyrillic_el, Cyrillic_EL		]	};
//key <AD11> { [ slash,question,questiondown,U203D] };// interrobang
//key <AD12> { [ Cyrillic_sha, Cyrillic_SHA,Cyrillic_shcha, Cyrillic_SHCHA] };// interrobang
//key <AD12> { [ Cyrillic_che, Cyrillic_CHE, semicolon, colon ] };

// home row, left side
key <AC01> { [ Cyrillic_a, Cyrillic_A,4] };
key <AC02> { [ Cyrillic_o, Cyrillic_O,5] };
key <AC03> { [ Cyrillic_ie, Cyrillic_IE,6] };
key <AC04> { [ Cyrillic_u, Cyrillic_U,Escape,Escape] };
key <AC05> { [Cyrillic_i, Cyrillic_I]	};

// home row, right side
key <AC06> { [ Cyrillic_de, Cyrillic_DE,eth,ETH] };
key <AC07> { [ Cyrillic_ha, Cyrillic_HA,Left] };
key <AC08> { [ Cyrillic_te, Cyrillic_TE,Down] };
key <AC09> { [ Cyrillic_en, Cyrillic_EN,Up] };
key <AC10> { [ Cyrillic_es, Cyrillic_ES,Right] };
//key <AC11> { [ Cyrillic_yu, Cyrillic_YU,minus,underscore], type[Group1] = "FOUR_LEVEL_ALPHABETIC" };

key <BKSL> { [ backslash,bar] };

// lower row, left side
//key <AB01> { [ Cyrillic_e,	Cyrillic_E,1] };
key <AB02> { [Cyrillic_ya, Cyrillic_YA,2		]	};
key <AB03> { [Cyrillic_shorti, Cyrillic_SHORTI,3	]	};
key <AB04> { [Cyrillic_ka, Cyrillic_KA		]	};
key <AB05> { [Cyrillic_softsign, Cyrillic_SOFTSIGN	]	};
key <AB06> { [Cyrillic_be, Cyrillic_BE		]	};
key <AB07> { [Cyrillic_em, Cyrillic_EM		]	};
key <AB08> { [Cyrillic_zhe, Cyrillic_ZHE		]	};
key <AB09> { [Cyrillic_ve, Cyrillic_VE		]	};
key <AB10> { [Cyrillic_ze, Cyrillic_ZE		]	};
key <SPCE> {[ space, ISO_First_Group, ISO_Last_Group ],
type[Group1] = "PC_ALT_LEVEL2"
 };
//key <SPCE> { [space]};

include "level3(ralt_switch)"
};

